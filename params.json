{"name":"NetworkKit","tagline":"Lightweight Networking and Parsing framework made for iOS, Mac, WatchOS and tvOS.","body":"# NetworkKit ![License MIT](https://go-shields.herokuapp.com/license-MIT-blue.png) \r\n\r\n[![Build Status](https://travis-ci.org/imex94/NetworkKit.svg?branch=master)](https://travis-ci.org/imex94/NetworkKit)\r\n[![Available devices](https://camo.githubusercontent.com/30f3ea607a65990e8cf2d6e11a48602167399324/68747470733a2f2f636f636f61706f642d6261646765732e6865726f6b756170702e636f6d2f702f41464e6574776f726b696e672f62616467652e706e67)]()\r\n\r\nA lightweight iOS, Mac and Watch OS framework that makes networking and parsing super simple. Uses the open-sourced [JSONHelper](https://github.com/isair/JSONHelper) with functional parsing. For networking the library supports basic **GET**, **POST**, **DELETE** HTTP requests.\r\n\r\n## Install\r\n\r\n### Framework\r\n\r\nDownload **NetworkKit.framework** file in the Framework folder and drag it into your application.\r\n\r\nMake sure you copy the framework into the project directory and in side the **Project Target** - **Build Phases** - **Link Binary With Libraries** you have added the framework.\r\n\r\n![Import Framework](https://github.com/imex94/NetworkKit/blob/master/images/import.png \"Import Framework\")\r\n\r\n## Usage\r\n\r\n**NetworkKitExample** project provides a guidance to get started.\r\n\r\nFor the purpose of this example, let say we want to download one of the stories from Hacker News. For this let's use their API endpoint - https://hacker-news.firebaseio.com/v0/item/11245652.json?print=pretty, which give us the following **JSON** response:\r\n\r\n\r\n[![Run in Postman](https://run.pstmn.io/button.png)](https://www.getpostman.com/run-collection/aa59a52596f959def779)\r\n\r\n```json\r\n{\r\n  \"by\": \"jergason\",\r\n  \"id\": 11245652,\r\n  \"kids\": [\r\n    11245801,\r\n    11245962,\r\n    11250239,\r\n    11246046\r\n  ],\r\n  \"time\": 1457449896,\r\n  \"title\": \"CocoaPods downloads max out five GitHub server CPUs\",\r\n  \"type\": \"story\"\r\n}\r\n```\r\nWe want to deserialize the JSON response above to **Swift object**. To do this, we need a **struct** that conforms the protocol **Deserializable** and implement the **required init(data: [String: AnyObject])** constructor and use the deserialization operator (`<--`):\r\n\r\n```swift\r\nstruct NKItem: Deserializable {\r\n    var id: Int?\r\n    var username: String?\r\n    var kids: [Int]?\r\n    var title: String?\r\n    var type: String?\r\n    var date: NSDate?\r\n\r\n    init(data: [String : AnyObject]) {\r\n        id <-- data[\"id\"]\r\n        username <-- data[\"by\"]\r\n        kids <-- data[\"kids\"]\r\n        title <-- data[\"title\"]\r\n        type <-- data[\"type\"]\r\n        date <-- data[\"time\"]\r\n    }\r\n}\r\n```\r\n\r\nTo connect to an API and perform a **GET** request is simple and intuitive and parsing is like **magic**:\r\n\r\n```swift\r\nNKHTTPRequest.GET(\r\n  \"https://hacker-news.firebaseio.com/v0/item/11245652.json\",                \r\n  params: [\"print\": \"pretty\"],\r\n  success: { data in\r\n      var item: NKItem?\r\n      item <-- data                                        \r\n  },\r\n  failure: { error in\r\n      print(error.message)\r\n  })\r\n```\r\n\r\n## API\r\n\r\n### Networking\r\n\r\n#### GET\r\nA simple HTTP GET method to get request from a url.\r\n\r\n**urlString** - `String` <br />\r\nThe string representing the url. <br />\r\n\r\n**auth (Optional)** - `NKOauth?` <br />\r\nAdd Oauth 2.0 when the API requires one. Just specify the consumerKey and consumer Secret, like this\r\nNKOauth(consumerKey: \"\", consumerSecret: \"\"). <br />\r\n\r\n**params (Optional)** - `[NSObject: AnyObject]?` <br />\r\nThe parameters you need to pass with the GET method. Everything after '?'. <br />\r\n\r\n**success** - `((AnyObject) -> Void)` <br />\r\nSuccessful closure in case the request was successful. <br />\r\n\r\n**failure** -  `((NKHTTPRequestError) -> Void)` <br />\r\nFailure Closure which notifies if any error has occurred during the request. <br />\r\n\r\n#### POST\r\nA simple HTTP POST method to post a resource to the url.\r\n\r\n**urlString** - `String` <br />\r\nThe string representing the url.\r\n\r\n**auth (Optional)** - `NKOauth?` <br />\r\nAdd Oauth 2.0 when the API requires one. Just specify the consumerKey and consumer Secret, like this\r\nNKOauth(consumerKey: \"\", consumerSecret: \"\"). <br />\r\n\r\n**params (Optional)** - `[NSObject: AnyObject]?` <br />\r\nThe body you need to pass with the POST method. Resources you want to pass. <br />\r\n\r\n**success** - `((AnyObject) -> Void)` <br />\r\nSuccessful closure in case the request was successful. <br />\r\n\r\n**failure** -  `((NKHTTPRequestError) -> Void)` <br />\r\nFailure Closure which notifies if any error has occured during the request. <br />\r\n\r\n#### DELETE\r\nA simple HTTP DELETE method to delete a resource from the server.\r\n\r\n**urlString** - `String` <br />\r\nThe string representing the url. <br />\r\n\r\n**auth (Optional)** - `NKOauth?` <br />\r\nAdd Oauth 2.0 when the API requires one. Just specify the consumerKey and consumer Secret, like this\r\nNKOauth(consumerKey: \"\", consumerSecret: \"\"). <br />\r\n\r\n**params (Optional)** - `[NSObject: AnyObject]?` <br />\r\nThe body you need to pass with the DELETE method. Resources you want to delete. <br />\r\n\r\n**success** - `((AnyObject) -> Void)` <br />\r\nSuccessful closure in case the request was successful. <br />\r\n\r\n**failure** -  `((NKHTTPRequestError) -> Void)` <br />\r\nFailure Closure which notifies if any error has occured during the request. <br />\r\n\r\n#### OAuth 2.0\r\n\r\nOr if you need OAuth 2.0 to use an API, that's also simple, just include the auth **consumer key** and **consumer secret** when you perform a request:\r\n\r\n```swift\r\nNKHTTPRequest.GET(\r\n  \"https://hacker-news.firebaseio.com/v0/item/11245652.json\",\r\n  auth: NKOauth(consumerKey: \"consumerKey\", consumerSecret: \"consumerSecret\"),\r\n  params: [\"print\": \"pretty\"],\r\n  success: { data in\r\n      var item: NKEItem?\r\n      item <-- data\r\n  },\r\n  failure: { error in\r\n      print(error.message)\r\n  })\r\n```\r\n\r\n#### Cancel HTTP Requests\r\n\r\nThere are error and internet availablity checking implemented in the framework, but you can simply cancel any task you want if its needed:\r\n\r\n```swift\r\nlet dataTask = NKHTTPRequest.GET(\r\n  \"https://hacker-news.firebaseio.com/v0/item/11245652.json\",\r\n  params: [\"print\": \"pretty\"],\r\n  success: { data in\r\n\r\n  },\r\n  failure: { error in\r\n    print(error.message)\r\n})\r\n\r\ndataTask?.cancel()\r\n```\r\n\r\n### Parsing\r\n\r\nSimple use of parsing can be seen above. There are more advanced options to use\r\n\r\n#### Assigning default values\r\n\r\n```swift\r\nstruct NKItem: Deserializable {\r\n    var id = 0\r\n    var username = \"\"\r\n\r\n    init(data: [String : AnyObject]) {\r\n        id <-- data[\"id\"]\r\n        username <-- data[\"by\"]\r\n    }\r\n}\r\n```\r\n\r\n#### NSURL Deserialization\r\n\r\n```swift\r\nlet profileImage: NSURL?\r\nprofileImage <-- \"https://example.com/images/profile_normal.png\"\r\n```\r\n\r\n#### NSDate Deserialization\r\n\r\n```swift\r\nlet date: NSDate?\r\ndate <-- 1414172803 // timestamp to NSDate deserialization\r\n```\r\n\r\n#### Nested JSON\r\n\r\nLet's consider a the truncated version of the Twitter API response:\r\n\r\n[![Run in Postman](https://run.pstmn.io/button.png)](https://www.getpostman.com/run-collection/aa59a52596f959def779)\r\n\r\n```json\r\n{\r\n  \"text\":\"Aggressive Ponytail #freebandnames\",\r\n  \"retweet_count\": 2,\r\n  \"user\":{  \r\n      \"name\":\"Sean Cummings\",\r\n      \"location\":\"LA, CA\",\r\n      \"verified\":false,\r\n      \"screen_name\":\"sean_cummings\"\r\n  }\r\n}\r\n```\r\n\r\nWhere you can just simply create a User and a Tweet structure with a user instance inside:\r\n\r\n```swift\r\nstruct NKTwitterUser: Deserializable {\r\n    var name = \"\"\r\n    var location = \"\"\r\n    var verified = false\r\n    var screenName = \"\"\r\n\r\n    init(data: [String : AnyObject]) {\r\n        name <-- data[\"name\"]\r\n        location <-- data[\"location\"]\r\n        verified <-- data[\"verified\"]\r\n        screenName <-- data[\"screen_name\"]\r\n    }\r\n}\r\n```\r\n\r\n```swift\r\nstruct NKTweet: Deserializable {\r\n    var text = \"\"\r\n    var retweetCount = 0\r\n    var user: NKTwitterUser?\r\n\r\n    init(data: [String : AnyObject]) {\r\n        text <-- data[\"text\"]\r\n        retweetCount <-- data[\"retweet_count\"]\r\n        user <-- data[\"user\"]\r\n    }\r\n}\r\n```\r\n\r\nIt's that simple.\r\n\r\n## License\r\n\r\nMIT â“’ Alex Telek\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}